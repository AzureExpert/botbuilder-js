/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the AttachmentView class.
 * @constructor
 * Attachment View name and size
 *
 * @member {string} [viewId] Content type of the attachment
 * @member {number} [size] Name of the attachment
 */
export interface AttachmentView {
  viewId?: string;
  size?: number;
}

/**
 * @class
 * Initializes a new instance of the AttachmentInfo class.
 * @constructor
 * Metdata for an attachment
 *
 * @member {string} [name] Name of the attachment
 * @member {string} [type] ContentType of the attachment
 * @member {array} [views] attachment views
 */
export interface AttachmentInfo {
  name?: string;
  type?: string;
  views?: AttachmentView[];
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Object representing error information
 *
 * @member {string} [code] Error code
 * @member {string} [message] Error message
 */
export interface ErrorModel {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * An HTTP API response
 *
 * @member {object} [error] Error message
 * @member {string} [error.code] Error code
 * @member {string} [error.message] Error message
 */
export interface ErrorResponse {
  error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the ChannelAccount class.
 * @constructor
 * Channel account information needed to route a message
 *
 * @member {string} [id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [name] Display friendly name
 */
export interface ChannelAccount {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationAccount class.
 * @constructor
 * Channel account information for a conversation
 *
 * @member {boolean} [isGroup] Is this a reference to a group
 * @member {string} [id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [name] Display friendly name
 */
export interface ConversationAccount {
  isGroup?: boolean;
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the MessageReaction class.
 * @constructor
 * Message reaction object
 *
 * @member {string} [type] Message reaction type. Possible values include:
 * 'like', 'plusOne'
 */
export interface MessageReaction {
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the CardAction class.
 * @constructor
 * A clickable action
 *
 * @member {string} [type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [title] Text description which appears on the button
 * @member {string} [image] Image URL which will appear on the button, next to
 * text label
 * @member {string} [text] Text for this action
 * @member {string} [displayText] (Optional) text to display in the chat feed
 * if the button is clicked
 * @member {object} [value] Supplementary parameter for action. Content of this
 * property depends on the ActionType
 */
export interface CardAction {
  type?: string;
  title?: string;
  image?: string;
  text?: string;
  displayText?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the SuggestedActions class.
 * @constructor
 * SuggestedActions that can be performed
 *
 * @member {array} [to] Ids of the recipients that the actions should be shown
 * to.  These Ids are relative to the channelId and a subset of all recipients
 * of the activity
 * @member {array} [actions] Actions that can be shown to the user
 */
export interface SuggestedActions {
  to?: string[];
  actions?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the Attachment class.
 * @constructor
 * An attachment within an activity
 *
 * @member {string} [contentType] mimetype/Contenttype for the file
 * @member {string} [contentUrl] Content Url
 * @member {object} [content] Embedded content
 * @member {string} [name] (OPTIONAL) The name of the attachment
 * @member {string} [thumbnailUrl] (OPTIONAL) Thumbnail associated with
 * attachment
 */
export interface Attachment {
  contentType?: string;
  contentUrl?: string;
  content?: any;
  name?: string;
  thumbnailUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Entity class.
 * @constructor
 * Object of schema.org types
 *
 * @member {string} [type] Entity Type (typically from schema.org types)
 */
export interface Entity {
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationReference class.
 * @constructor
 * An object relating to a particular point in a conversation
 *
 * @member {string} [activityId] (Optional) ID of the activity to refer to
 * @member {object} [user] (Optional) User participating in this conversation
 * @member {string} [user.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [user.name] Display friendly name
 * @member {object} [bot] Bot participating in this conversation
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [bot.name] Display friendly name
 * @member {object} [conversation] Conversation reference
 * @member {boolean} [conversation.isGroup] Is this a reference to a group
 * @member {string} [conversation.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [conversation.name] Display friendly name
 * @member {string} [channelId] Channel ID
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the referenced conversation may be performed
 */
export interface ConversationReference {
  activityId?: string;
  user?: ChannelAccount;
  bot?: ChannelAccount;
  conversation?: ConversationAccount;
  channelId?: string;
  serviceUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the TextHighlight class.
 * @constructor
 * @member {string} [text] plain text fragment to highlight
 * @member {number} [occurence] index of occurence of the Text (Starting at 1)
 */
export interface TextHighlight {
  text?: string;
  occurence?: number;
}

/**
 * @class
 * Initializes a new instance of the Activity class.
 * @constructor
 * An Activity is the basic communication type for the Bot Framework 3.0
 * protocol
 *
 * @member {string} [type] The type of the activity. Possible values include:
 * 'message', 'contactRelationUpdate', 'conversationUpdate', 'typing', 'ping',
 * 'endOfConversation', 'event', 'invoke', 'deleteUserData', 'messageUpdate',
 * 'messageDelete', 'installationUpdate', 'messageReaction', 'suggestion'
 * @member {string} [id] ID of this activity
 * @member {date} [timestamp] UTC Time when message was sent (set by service)
 * @member {date} [localTimestamp] Local time when message was sent (set by
 * client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the activity may be performed
 * @member {string} [channelId] ID of the channel where the activity was sent
 * @member {object} [from] Sender address
 * @member {string} [from.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [from.name] Display friendly name
 * @member {object} [conversation] Conversation
 * @member {boolean} [conversation.isGroup] Is this a reference to a group
 * @member {string} [conversation.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [conversation.name] Display friendly name
 * @member {object} [recipient] (Outbound to bot only) Bot's address that
 * received the message
 * @member {string} [recipient.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [recipient.name] Display friendly name
 * @member {string} [textFormat] Format of text fields Default:markdown.
 * Possible values include: 'markdown', 'plain', 'xml'
 * @member {string} [attachmentLayout] Hint for how to deal with multiple
 * attachments. Default:list. Possible values include: 'list', 'carousel'
 * @member {array} [membersAdded] Members added to the conversation
 * @member {array} [membersRemoved] Members removed from the conversation
 * @member {array} [reactionsAdded] Reactions added to the activity
 * @member {array} [reactionsRemoved] Reactions removed from the activity
 * @member {string} [topicName] The conversation's updated topic name
 * @member {boolean} [historyDisclosed] True if prior history of the channel is
 * disclosed
 * @member {string} [locale] The language code of the Text field
 * @member {string} [text] Content for the message
 * @member {string} [speak] SSML Speak for TTS audio response
 * @member {string} [inputHint] Input hint to the channel on what the bot is
 * expecting. Possible values include: 'acceptingInput', 'ignoringInput',
 * 'expectingInput'
 * @member {string} [summary] Text to display if the channel cannot render
 * cards
 * @member {object} [suggestedActions] SuggestedActions are used to provide
 * keyboard/quickreply like behavior in many clients
 * @member {array} [suggestedActions.to] Ids of the recipients that the actions
 * should be shown to.  These Ids are relative to the channelId and a subset of
 * all recipients of the activity
 * @member {array} [suggestedActions.actions] Actions that can be shown to the
 * user
 * @member {array} [attachments] Attachments
 * @member {array} [entities] Collection of Entity objects, each of which
 * contains metadata about this activity. Each Entity object is typed.
 * @member {object} [channelData] Channel-specific payload
 * @member {string} [action] ContactAdded/Removed action
 * @member {string} [replyToId] The original ID this message is a response to
 * @member {object} [value] Open-ended value
 * @member {string} [name] Name of the operation to invoke or the name of the
 * event
 * @member {object} [relatesTo] Reference to another conversation or activity
 * @member {string} [relatesTo.activityId] (Optional) ID of the activity to
 * refer to
 * @member {object} [relatesTo.user] (Optional) User participating in this
 * conversation
 * @member {string} [relatesTo.user.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [relatesTo.user.name] Display friendly name
 * @member {object} [relatesTo.bot] Bot participating in this conversation
 * @member {string} [relatesTo.bot.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [relatesTo.bot.name] Display friendly name
 * @member {object} [relatesTo.conversation] Conversation reference
 * @member {boolean} [relatesTo.conversation.isGroup] Is this a reference to a
 * group
 * @member {string} [relatesTo.conversation.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [relatesTo.conversation.name] Display friendly name
 * @member {string} [relatesTo.channelId] Channel ID
 * @member {string} [relatesTo.serviceUrl] Service endpoint where operations
 * concerning the referenced conversation may be performed
 * @member {string} [code] Code indicating why the conversation has ended.
 * Possible values include: 'unknown', 'completedSuccessfully',
 * 'userCancelled', 'botTimedOut', 'botIssuedInvalidMessage', 'channelFailed'
 * @member {date} [expiration] DateTime to expire the activity as ISO 8601
 * encoded datetime
 * @member {string} [importance] Importance of this activity
 * {Low|Normal|High}, null value indicates Normal importance see
 * ActivityImportance)
 * @member {string} [deliveryMode] Hint to describe how this activity should be
 * delivered.
 * Currently: null or "Default" = default delivery
 * "Notification" = notification semantics
 * @member {array} [textHighlights] TextHighlight in the activity represented
 * in the ReplyToId property
 */
export interface Activity {
  type?: string;
  id?: string;
  timestamp?: Date;
  localTimestamp?: Date;
  serviceUrl?: string;
  channelId?: string;
  from?: ChannelAccount;
  conversation?: ConversationAccount;
  recipient?: ChannelAccount;
  textFormat?: string;
  attachmentLayout?: string;
  membersAdded?: ChannelAccount[];
  membersRemoved?: ChannelAccount[];
  reactionsAdded?: MessageReaction[];
  reactionsRemoved?: MessageReaction[];
  topicName?: string;
  historyDisclosed?: boolean;
  locale?: string;
  text?: string;
  speak?: string;
  inputHint?: string;
  summary?: string;
  suggestedActions?: SuggestedActions;
  attachments?: Attachment[];
  entities?: Entity[];
  channelData?: any;
  action?: string;
  replyToId?: string;
  value?: any;
  name?: string;
  relatesTo?: ConversationReference;
  code?: string;
  expiration?: Date;
  importance?: string;
  deliveryMode?: string;
  textHighlights?: TextHighlight[];
}

/**
 * @class
 * Initializes a new instance of the ConversationParameters class.
 * @constructor
 * Parameters for creating a new conversation
 *
 * @member {boolean} [isGroup] IsGroup
 * @member {object} [bot] The bot address for this conversation
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [bot.name] Display friendly name
 * @member {array} [members] Members to add to the conversation
 * @member {string} [topicName] (Optional) Topic of the conversation (if
 * supported by the channel)
 * @member {object} [activity] (Optional) When creating a new conversation, use
 * this activity as the intial message to the conversation
 * @member {string} [activity.type] The type of the activity. Possible values
 * include: 'message', 'contactRelationUpdate', 'conversationUpdate', 'typing',
 * 'ping', 'endOfConversation', 'event', 'invoke', 'deleteUserData',
 * 'messageUpdate', 'messageDelete', 'installationUpdate', 'messageReaction',
 * 'suggestion'
 * @member {string} [activity.id] ID of this activity
 * @member {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 * @member {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 * @member {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 * @member {string} [activity.channelId] ID of the channel where the activity
 * was sent
 * @member {object} [activity.from] Sender address
 * @member {string} [activity.from.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.from.name] Display friendly name
 * @member {object} [activity.conversation] Conversation
 * @member {boolean} [activity.conversation.isGroup] Is this a reference to a
 * group
 * @member {string} [activity.conversation.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.conversation.name] Display friendly name
 * @member {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 * @member {string} [activity.recipient.id] Channel id for the user or bot on
 * this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.recipient.name] Display friendly name
 * @member {string} [activity.textFormat] Format of text fields
 * Default:markdown. Possible values include: 'markdown', 'plain', 'xml'
 * @member {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments. Default:list. Possible values include: 'list',
 * 'carousel'
 * @member {array} [activity.membersAdded] Members added to the conversation
 * @member {array} [activity.membersRemoved] Members removed from the
 * conversation
 * @member {array} [activity.reactionsAdded] Reactions added to the activity
 * @member {array} [activity.reactionsRemoved] Reactions removed from the
 * activity
 * @member {string} [activity.topicName] The conversation's updated topic name
 * @member {boolean} [activity.historyDisclosed] True if prior history of the
 * channel is disclosed
 * @member {string} [activity.locale] The language code of the Text field
 * @member {string} [activity.text] Content for the message
 * @member {string} [activity.speak] SSML Speak for TTS audio response
 * @member {string} [activity.inputHint] Input hint to the channel on what the
 * bot is expecting. Possible values include: 'acceptingInput',
 * 'ignoringInput', 'expectingInput'
 * @member {string} [activity.summary] Text to display if the channel cannot
 * render cards
 * @member {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 * @member {array} [activity.suggestedActions.to] Ids of the recipients that
 * the actions should be shown to.  These Ids are relative to the channelId and
 * a subset of all recipients of the activity
 * @member {array} [activity.suggestedActions.actions] Actions that can be
 * shown to the user
 * @member {array} [activity.attachments] Attachments
 * @member {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 * @member {object} [activity.channelData] Channel-specific payload
 * @member {string} [activity.action] ContactAdded/Removed action
 * @member {string} [activity.replyToId] The original ID this message is a
 * response to
 * @member {object} [activity.value] Open-ended value
 * @member {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 * @member {object} [activity.relatesTo] Reference to another conversation or
 * activity
 * @member {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 * @member {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 * @member {string} [activity.relatesTo.user.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.relatesTo.user.name] Display friendly name
 * @member {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 * @member {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.relatesTo.bot.name] Display friendly name
 * @member {object} [activity.relatesTo.conversation] Conversation reference
 * @member {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 * @member {string} [activity.relatesTo.conversation.id] Channel id for the
 * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [activity.relatesTo.conversation.name] Display friendly
 * name
 * @member {string} [activity.relatesTo.channelId] Channel ID
 * @member {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 * @member {string} [activity.code] Code indicating why the conversation has
 * ended. Possible values include: 'unknown', 'completedSuccessfully',
 * 'userCancelled', 'botTimedOut', 'botIssuedInvalidMessage', 'channelFailed'
 * @member {date} [activity.expiration] DateTime to expire the activity as ISO
 * 8601 encoded datetime
 * @member {string} [activity.importance] Importance of this activity
 * {Low|Normal|High}, null value indicates Normal importance see
 * ActivityImportance)
 * @member {string} [activity.deliveryMode] Hint to describe how this activity
 * should be delivered.
 * Currently: null or "Default" = default delivery
 * "Notification" = notification semantics
 * @member {array} [activity.textHighlights] TextHighlight in the activity
 * represented in the ReplyToId property
 * @member {object} [channelData] Channel specific payload for creating the
 * conversation
 */
export interface ConversationParameters {
  isGroup?: boolean;
  bot?: ChannelAccount;
  members?: ChannelAccount[];
  topicName?: string;
  activity?: Activity;
  channelData?: any;
}

/**
 * @class
 * Initializes a new instance of the ConversationResourceResponse class.
 * @constructor
 * A response containing a resource
 *
 * @member {string} [activityId] ID of the Activity (if sent)
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the conversation may be performed
 * @member {string} [id] Id of the resource
 */
export interface ConversationResourceResponse {
  activityId?: string;
  serviceUrl?: string;
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceResponse class.
 * @constructor
 * A response containing a resource ID
 *
 * @member {string} [id] Id of the resource
 */
export interface ResourceResponse {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the AttachmentData class.
 * @constructor
 * Attachment data
 *
 * @member {string} [type] Content-Type of the attachment
 * @member {string} [name] Name of the attachment
 * @member {buffer} [originalBase64] Attachment content
 * @member {buffer} [thumbnailBase64] Attachment thumbnail
 */
export interface AttachmentData {
  type?: string;
  name?: string;
  originalBase64?: Buffer;
  thumbnailBase64?: Buffer;
}

/**
 * @class
 * Initializes a new instance of the CardImage class.
 * @constructor
 * An image on a card
 *
 * @member {string} [url] URL thumbnail image for major content property
 * @member {string} [alt] Image description intended for screen readers
 * @member {object} [tap] Action assigned to specific Attachment
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 */
export interface CardImage {
  url?: string;
  alt?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the HeroCard class.
 * @constructor
 * A Hero card (card with a single, large image)
 *
 * @member {string} [title] Title of the card
 * @member {string} [subtitle] Subtitle of the card
 * @member {string} [text] Text for the card
 * @member {array} [images] Array of images for the card
 * @member {array} [buttons] Set of actions applicable to the current card
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 */
export interface HeroCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the ThumbnailUrl class.
 * @constructor
 * Thumbnail URL
 *
 * @member {string} url URL pointing to the thumbnail to use for media content
 * @member {string} [alt] HTML alt text to include on this thumbnail image
 */
export interface ThumbnailUrl {
  url: string;
  alt?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaUrl class.
 * @constructor
 * Media URL
 *
 * @member {string} url Url for the media
 * @member {string} [profile] Optional profile hint to the client to
 * differentiate multiple MediaUrl objects from each other
 */
export interface MediaUrl {
  url: string;
  profile?: string;
}

/**
 * @class
 * Initializes a new instance of the AnimationCard class.
 * @constructor
 * An animation card (Ex: gif or short video clip)
 *
 * @member {string} [title] Title of this card
 * @member {string} [subtitle] Subtitle of this card
 * @member {string} [text] Text of this card
 * @member {object} [image] Thumbnail placeholder
 * @member {string} [image.url] URL pointing to the thumbnail to use for media
 * content
 * @member {string} [image.alt] HTML alt text to include on this thumbnail
 * image
 * @member {array} [media] Media URLs for this card
 * @member {array} [buttons] Actions on this card
 * @member {boolean} [shareable] This content may be shared with others
 * (default:true)
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 * @member {boolean} [autostart] Should the client automatically start playback
 * of media in this card (default:true)
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "4:3"
 * @member {object} [value] Supplementary parameter for this card
 */
export interface AnimationCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  aspect?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the AudioCard class.
 * @constructor
 * Audio card
 *
 * @member {string} [title] Title of this card
 * @member {string} [subtitle] Subtitle of this card
 * @member {string} [text] Text of this card
 * @member {object} [image] Thumbnail placeholder
 * @member {string} [image.url] URL pointing to the thumbnail to use for media
 * content
 * @member {string} [image.alt] HTML alt text to include on this thumbnail
 * image
 * @member {array} [media] Media URLs for this card
 * @member {array} [buttons] Actions on this card
 * @member {boolean} [shareable] This content may be shared with others
 * (default:true)
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 * @member {boolean} [autostart] Should the client automatically start playback
 * of media in this card (default:true)
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "4:3"
 * @member {object} [value] Supplementary parameter for this card
 */
export interface AudioCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  aspect?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the BasicCard class.
 * @constructor
 * A basic card
 *
 * @member {string} [title] Title of the card
 * @member {string} [subtitle] Subtitle of the card
 * @member {string} [text] Text for the card
 * @member {array} [images] Array of images for the card
 * @member {array} [buttons] Set of actions applicable to the current card
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 */
export interface BasicCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the MediaCard class.
 * @constructor
 * Media card
 *
 * @member {string} [title] Title of this card
 * @member {string} [subtitle] Subtitle of this card
 * @member {string} [text] Text of this card
 * @member {object} [image] Thumbnail placeholder
 * @member {string} [image.url] URL pointing to the thumbnail to use for media
 * content
 * @member {string} [image.alt] HTML alt text to include on this thumbnail
 * image
 * @member {array} [media] Media URLs for this card
 * @member {array} [buttons] Actions on this card
 * @member {boolean} [shareable] This content may be shared with others
 * (default:true)
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 * @member {boolean} [autostart] Should the client automatically start playback
 * of media in this card (default:true)
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "4:3"
 * @member {object} [value] Supplementary parameter for this card
 */
export interface MediaCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  aspect?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the ReceiptItem class.
 * @constructor
 * An item on a receipt card
 *
 * @member {string} [title] Title of the Card
 * @member {string} [subtitle] Subtitle appears just below Title field, differs
 * from Title in font styling only
 * @member {string} [text] Text field appears just below subtitle, differs from
 * Subtitle in font styling only
 * @member {object} [image] Image
 * @member {string} [image.url] URL thumbnail image for major content property
 * @member {string} [image.alt] Image description intended for screen readers
 * @member {object} [image.tap] Action assigned to specific Attachment
 * @member {string} [image.tap.type] The type of action implemented by this
 * button. Possible values include: 'openUrl', 'imBack', 'postBack',
 * 'playAudio', 'playVideo', 'showImage', 'downloadFile', 'signin', 'call',
 * 'payment', 'messageBack'
 * @member {string} [image.tap.title] Text description which appears on the
 * button
 * @member {string} [image.tap.image] Image URL which will appear on the
 * button, next to text label
 * @member {string} [image.tap.text] Text for this action
 * @member {string} [image.tap.displayText] (Optional) text to display in the
 * chat feed if the button is clicked
 * @member {object} [image.tap.value] Supplementary parameter for action.
 * Content of this property depends on the ActionType
 * @member {string} [price] Amount with currency
 * @member {string} [quantity] Number of items of given kind
 * @member {object} [tap] This action will be activated when user taps on the
 * Item bubble.
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 */
export interface ReceiptItem {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: CardImage;
  price?: string;
  quantity?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the Fact class.
 * @constructor
 * Set of key-value pairs. Advantage of this section is that key and value
 * properties will be
 * rendered with default style information with some delimiter between them. So
 * there is no need for developer to specify style information.
 *
 * @member {string} [key] The key for this Fact
 * @member {string} [value] The value for this Fact
 */
export interface Fact {
  key?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ReceiptCard class.
 * @constructor
 * A receipt card
 *
 * @member {string} [title] Title of the card
 * @member {array} [items] Array of Receipt Items
 * @member {array} [facts] Array of Fact Objects   Array of key-value pairs.
 * @member {object} [tap] This action will be activated when user taps on the
 * card
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 * @member {string} [total] Total amount of money paid (or should be paid)
 * @member {string} [tax] Total amount of TAX paid(or should be paid)
 * @member {string} [vat] Total amount of VAT paid(or should be paid)
 * @member {array} [buttons] Set of actions applicable to the current card
 */
export interface ReceiptCard {
  title?: string;
  items?: ReceiptItem[];
  facts?: Fact[];
  tap?: CardAction;
  total?: string;
  tax?: string;
  vat?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the SigninCard class.
 * @constructor
 * A card representing a request to sign in
 *
 * @member {string} [text] Text for signin request
 * @member {array} [buttons] Action to use to perform signin
 */
export interface SigninCard {
  text?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the ThumbnailCard class.
 * @constructor
 * A thumbnail card (card with a single, small thumbnail image)
 *
 * @member {string} [title] Title of the card
 * @member {string} [subtitle] Subtitle of the card
 * @member {string} [text] Text for the card
 * @member {array} [images] Array of images for the card
 * @member {array} [buttons] Set of actions applicable to the current card
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself
 * @member {string} [tap.type] The type of action implemented by this button.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',
 * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',
 * 'messageBack'
 * @member {string} [tap.title] Text description which appears on the button
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label
 * @member {string} [tap.text] Text for this action
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 */
export interface ThumbnailCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the VideoCard class.
 * @constructor
 * Video card
 *
 * @member {string} [title] Title of this card
 * @member {string} [subtitle] Subtitle of this card
 * @member {string} [text] Text of this card
 * @member {object} [image] Thumbnail placeholder
 * @member {string} [image.url] URL pointing to the thumbnail to use for media
 * content
 * @member {string} [image.alt] HTML alt text to include on this thumbnail
 * image
 * @member {array} [media] Media URLs for this card
 * @member {array} [buttons] Actions on this card
 * @member {boolean} [shareable] This content may be shared with others
 * (default:true)
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 * @member {boolean} [autostart] Should the client automatically start playback
 * of media in this card (default:true)
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "4:3"
 * @member {object} [value] Supplementary parameter for this card
 */
export interface VideoCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  aspect?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the GeoCoordinates class.
 * @constructor
 * GeoCoordinates (entity type: "https://schema.org/GeoCoordinates")
 *
 * @member {number} [elevation] Elevation of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 * @member {number} [latitude] Latitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 * @member {number} [longitude] Longitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 * @member {string} [type] The type of the thing
 * @member {string} [name] The name of the thing
 */
export interface GeoCoordinates {
  elevation?: number;
  latitude?: number;
  longitude?: number;
  type?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Mention class.
 * @constructor
 * Mention information (entity type: "mention")
 *
 * @member {object} [mentioned] The mentioned user
 * @member {string} [mentioned.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 * @member {string} [mentioned.name] Display friendly name
 * @member {string} [text] Sub Text which represents the mention (can be null
 * or empty)
 * @member {string} [type] Entity Type (typically from schema.org types)
 */
export interface Mention {
  mentioned?: ChannelAccount;
  text?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the Place class.
 * @constructor
 * Place (entity type: "https://schema.org/Place")
 *
 * @member {object} [address] Address of the place (may be `string` or complex
 * object of type `PostalAddress`)
 * @member {object} [geo] Geo coordinates of the place (may be complex object
 * of type `GeoCoordinates` or `GeoShape`)
 * @member {object} [hasMap] Map to the place (may be `string` (URL) or complex
 * object of type `Map`)
 * @member {string} [type] The type of the thing
 * @member {string} [name] The name of the thing
 */
export interface Place {
  address?: any;
  geo?: any;
  hasMap?: any;
  type?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Thing class.
 * @constructor
 * Thing (entity type: "https://schema.org/Thing")
 *
 * @member {string} [type] The type of the thing
 * @member {string} [name] The name of the thing
 */
export interface Thing {
  type?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaEventValue class.
 * @constructor
 * Supplementary parameter for media events
 *
 * @member {object} [cardValue] Callback parameter specified in the Value field
 * of the MediaCard that originated this event
 */
export interface MediaEventValue {
  cardValue?: any;
}

/**
 * @class
 * Initializes a new instance of the MicrosoftPayMethodData class.
 * @constructor
 * W3C Payment Method Data for Microsoft Pay
 *
 * @member {string} [mechantId] Microsoft Pay Merchant ID
 * @member {array} [supportedNetworks] Supported payment networks (e.g., "visa"
 * and "mastercard")
 * @member {array} [supportedTypes] Supported payment types (e.g., "credit")
 */
export interface MicrosoftPayMethodData {
  mechantId?: string;
  supportedNetworks?: string[];
  supportedTypes?: string[];
}

/**
 * @class
 * Initializes a new instance of the PaymentAddress class.
 * @constructor
 * Address within a Payment Request
 *
 * @member {string} [country] This is the CLDR (Common Locale Data Repository)
 * region code. For example, US, GB, CN, or JP
 * @member {array} [addressLine] This is the most specific part of the address.
 * It can include, for example, a street name, a house number, apartment
 * number, a rural delivery route, descriptive instructions, or a post office
 * box number.
 * @member {string} [region] This is the top level administrative subdivision
 * of the country. For example, this can be a state, a province, an oblast, or
 * a prefecture.
 * @member {string} [city] This is the city/town portion of the address.
 * @member {string} [dependentLocality] This is the dependent locality or
 * sublocality within a city. For example, used for neighborhoods, boroughs,
 * districts, or UK dependent localities.
 * @member {string} [postalCode] This is the postal code or ZIP code, also
 * known as PIN code in India.
 * @member {string} [sortingCode] This is the sorting code as used in, for
 * example, France.
 * @member {string} [languageCode] This is the BCP-47 language code for the
 * address. It's used to determine the field separators and the order of fields
 * when formatting the address for display.
 * @member {string} [organization] This is the organization, firm, company, or
 * institution at this address.
 * @member {string} [recipient] This is the name of the recipient or contact
 * person.
 * @member {string} [phone] This is the phone number of the recipient or
 * contact person.
 */
export interface PaymentAddress {
  country?: string;
  addressLine?: string[];
  region?: string;
  city?: string;
  dependentLocality?: string;
  postalCode?: string;
  sortingCode?: string;
  languageCode?: string;
  organization?: string;
  recipient?: string;
  phone?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentCurrencyAmount class.
 * @constructor
 * Supplies monetary amounts
 *
 * @member {string} [currency] A currency identifier
 * @member {string} [value] Decimal monetary value
 * @member {string} [currencySystem] Currency system
 */
export interface PaymentCurrencyAmount {
  currency?: string;
  value?: string;
  currencySystem?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentItem class.
 * @constructor
 * Indicates what the payment request is for and the value asked for
 *
 * @member {string} [label] Human-readable description of the item
 * @member {object} [amount] Monetary amount for the item
 * @member {string} [amount.currency] A currency identifier
 * @member {string} [amount.value] Decimal monetary value
 * @member {string} [amount.currencySystem] Currency system
 * @member {boolean} [pending] When set to true this flag means that the amount
 * field is not final.
 */
export interface PaymentItem {
  label?: string;
  amount?: PaymentCurrencyAmount;
  pending?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PaymentShippingOption class.
 * @constructor
 * Describes a shipping option
 *
 * @member {string} [id] String identifier used to reference this
 * PaymentShippingOption
 * @member {string} [label] Human-readable description of the item
 * @member {object} [amount] Contains the monetary amount for the item
 * @member {string} [amount.currency] A currency identifier
 * @member {string} [amount.value] Decimal monetary value
 * @member {string} [amount.currencySystem] Currency system
 * @member {boolean} [selected] Indicates whether this is the default selected
 * PaymentShippingOption
 */
export interface PaymentShippingOption {
  id?: string;
  label?: string;
  amount?: PaymentCurrencyAmount;
  selected?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PaymentDetailsModifier class.
 * @constructor
 * Provides details that modify the PaymentDetails based on payment method
 * identifier
 *
 * @member {array} [supportedMethods] Contains a sequence of payment method
 * identifiers
 * @member {object} [total] This value overrides the total field in the
 * PaymentDetails dictionary for the payment method identifiers in the
 * supportedMethods field
 * @member {string} [total.label] Human-readable description of the item
 * @member {object} [total.amount] Monetary amount for the item
 * @member {string} [total.amount.currency] A currency identifier
 * @member {string} [total.amount.value] Decimal monetary value
 * @member {string} [total.amount.currencySystem] Currency system
 * @member {boolean} [total.pending] When set to true this flag means that the
 * amount field is not final.
 * @member {array} [additionalDisplayItems] Provides additional display items
 * that are appended to the displayItems field in the PaymentDetails dictionary
 * for the payment method identifiers in the supportedMethods field
 * @member {object} [data] A JSON-serializable object that provides optional
 * information that might be needed by the supported payment methods
 */
export interface PaymentDetailsModifier {
  supportedMethods?: string[];
  total?: PaymentItem;
  additionalDisplayItems?: PaymentItem[];
  data?: any;
}

/**
 * @class
 * Initializes a new instance of the PaymentDetails class.
 * @constructor
 * Provides information about the requested transaction
 *
 * @member {object} [total] Contains the total amount of the payment request
 * @member {string} [total.label] Human-readable description of the item
 * @member {object} [total.amount] Monetary amount for the item
 * @member {string} [total.amount.currency] A currency identifier
 * @member {string} [total.amount.value] Decimal monetary value
 * @member {string} [total.amount.currencySystem] Currency system
 * @member {boolean} [total.pending] When set to true this flag means that the
 * amount field is not final.
 * @member {array} [displayItems] Contains line items for the payment request
 * that the user agent may display
 * @member {array} [shippingOptions] A sequence containing the different
 * shipping options for the user to choose from
 * @member {array} [modifiers] Contains modifiers for particular payment method
 * identifiers
 * @member {string} [error] Error description
 */
export interface PaymentDetails {
  total?: PaymentItem;
  displayItems?: PaymentItem[];
  shippingOptions?: PaymentShippingOption[];
  modifiers?: PaymentDetailsModifier[];
  error?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentMethodData class.
 * @constructor
 * Indicates a set of supported payment methods and any associated payment
 * method specific data for those methods
 *
 * @member {array} [supportedMethods] Required sequence of strings containing
 * payment method identifiers for payment methods that the merchant web site
 * accepts
 * @member {object} [data] A JSON-serializable object that provides optional
 * information that might be needed by the supported payment methods
 */
export interface PaymentMethodData {
  supportedMethods?: string[];
  data?: any;
}

/**
 * @class
 * Initializes a new instance of the PaymentOptions class.
 * @constructor
 * Provides information about the options desired for the payment request
 *
 * @member {boolean} [requestPayerName] Indicates whether the user agent should
 * collect and return the payer's name as part of the payment request
 * @member {boolean} [requestPayerEmail] Indicates whether the user agent
 * should collect and return the payer's email address as part of the payment
 * request
 * @member {boolean} [requestPayerPhone] Indicates whether the user agent
 * should collect and return the payer's phone number as part of the payment
 * request
 * @member {boolean} [requestShipping] Indicates whether the user agent should
 * collect and return a shipping address as part of the payment request
 * @member {string} [shippingType] If requestShipping is set to true, then the
 * shippingType field may be used to influence the way the user agent presents
 * the user interface for gathering the shipping address
 */
export interface PaymentOptions {
  requestPayerName?: boolean;
  requestPayerEmail?: boolean;
  requestPayerPhone?: boolean;
  requestShipping?: boolean;
  shippingType?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentRequest class.
 * @constructor
 * A request to make a payment
 *
 * @member {string} [id] ID of this payment request
 * @member {array} [methodData] Allowed payment methods for this request
 * @member {object} [details] Details for this request
 * @member {object} [details.total] Contains the total amount of the payment
 * request
 * @member {string} [details.total.label] Human-readable description of the
 * item
 * @member {object} [details.total.amount] Monetary amount for the item
 * @member {string} [details.total.amount.currency] A currency identifier
 * @member {string} [details.total.amount.value] Decimal monetary value
 * @member {string} [details.total.amount.currencySystem] Currency system
 * @member {boolean} [details.total.pending] When set to true this flag means
 * that the amount field is not final.
 * @member {array} [details.displayItems] Contains line items for the payment
 * request that the user agent may display
 * @member {array} [details.shippingOptions] A sequence containing the
 * different shipping options for the user to choose from
 * @member {array} [details.modifiers] Contains modifiers for particular
 * payment method identifiers
 * @member {string} [details.error] Error description
 * @member {object} [options] Provides information about the options desired
 * for the payment request
 * @member {boolean} [options.requestPayerName] Indicates whether the user
 * agent should collect and return the payer's name as part of the payment
 * request
 * @member {boolean} [options.requestPayerEmail] Indicates whether the user
 * agent should collect and return the payer's email address as part of the
 * payment request
 * @member {boolean} [options.requestPayerPhone] Indicates whether the user
 * agent should collect and return the payer's phone number as part of the
 * payment request
 * @member {boolean} [options.requestShipping] Indicates whether the user agent
 * should collect and return a shipping address as part of the payment request
 * @member {string} [options.shippingType] If requestShipping is set to true,
 * then the shippingType field may be used to influence the way the user agent
 * presents the user interface for gathering the shipping address
 * @member {string} [expires] Expiration for this request, in ISO 8601 duration
 * format (e.g., 'P1D')
 */
export interface PaymentRequest {
  id?: string;
  methodData?: PaymentMethodData[];
  details?: PaymentDetails;
  options?: PaymentOptions;
  expires?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentResponse class.
 * @constructor
 * A PaymentResponse is returned when a user has selected a payment method and
 * approved a payment request
 *
 * @member {string} [methodName] The payment method identifier for the payment
 * method that the user selected to fulfil the transaction
 * @member {object} [details] A JSON-serializable object that provides a
 * payment method specific message used by the merchant to process the
 * transaction and determine successful fund transfer
 * @member {object} [shippingAddress] If the requestShipping flag was set to
 * true in the PaymentOptions passed to the PaymentRequest constructor, then
 * shippingAddress will be the full and final shipping address chosen by the
 * user
 * @member {string} [shippingAddress.country] This is the CLDR (Common Locale
 * Data Repository) region code. For example, US, GB, CN, or JP
 * @member {array} [shippingAddress.addressLine] This is the most specific part
 * of the address. It can include, for example, a street name, a house number,
 * apartment number, a rural delivery route, descriptive instructions, or a
 * post office box number.
 * @member {string} [shippingAddress.region] This is the top level
 * administrative subdivision of the country. For example, this can be a state,
 * a province, an oblast, or a prefecture.
 * @member {string} [shippingAddress.city] This is the city/town portion of the
 * address.
 * @member {string} [shippingAddress.dependentLocality] This is the dependent
 * locality or sublocality within a city. For example, used for neighborhoods,
 * boroughs, districts, or UK dependent localities.
 * @member {string} [shippingAddress.postalCode] This is the postal code or ZIP
 * code, also known as PIN code in India.
 * @member {string} [shippingAddress.sortingCode] This is the sorting code as
 * used in, for example, France.
 * @member {string} [shippingAddress.languageCode] This is the BCP-47 language
 * code for the address. It's used to determine the field separators and the
 * order of fields when formatting the address for display.
 * @member {string} [shippingAddress.organization] This is the organization,
 * firm, company, or institution at this address.
 * @member {string} [shippingAddress.recipient] This is the name of the
 * recipient or contact person.
 * @member {string} [shippingAddress.phone] This is the phone number of the
 * recipient or contact person.
 * @member {string} [shippingOption] If the requestShipping flag was set to
 * true in the PaymentOptions passed to the PaymentRequest constructor, then
 * shippingOption will be the id attribute of the selected shipping option
 * @member {string} [payerEmail] If the requestPayerEmail flag was set to true
 * in the PaymentOptions passed to the PaymentRequest constructor, then
 * payerEmail will be the email address chosen by the user
 * @member {string} [payerPhone] If the requestPayerPhone flag was set to true
 * in the PaymentOptions passed to the PaymentRequest constructor, then
 * payerPhone will be the phone number chosen by the user
 */
export interface PaymentResponse {
  methodName?: string;
  details?: any;
  shippingAddress?: PaymentAddress;
  shippingOption?: string;
  payerEmail?: string;
  payerPhone?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentRequestComplete class.
 * @constructor
 * Payload delivered when completing a payment request
 *
 * @member {string} [id] Payment request ID
 * @member {object} [paymentRequest] Initial payment request
 * @member {string} [paymentRequest.id] ID of this payment request
 * @member {array} [paymentRequest.methodData] Allowed payment methods for this
 * request
 * @member {object} [paymentRequest.details] Details for this request
 * @member {object} [paymentRequest.details.total] Contains the total amount of
 * the payment request
 * @member {string} [paymentRequest.details.total.label] Human-readable
 * description of the item
 * @member {object} [paymentRequest.details.total.amount] Monetary amount for
 * the item
 * @member {string} [paymentRequest.details.total.amount.currency] A currency
 * identifier
 * @member {string} [paymentRequest.details.total.amount.value] Decimal
 * monetary value
 * @member {string} [paymentRequest.details.total.amount.currencySystem]
 * Currency system
 * @member {boolean} [paymentRequest.details.total.pending] When set to true
 * this flag means that the amount field is not final.
 * @member {array} [paymentRequest.details.displayItems] Contains line items
 * for the payment request that the user agent may display
 * @member {array} [paymentRequest.details.shippingOptions] A sequence
 * containing the different shipping options for the user to choose from
 * @member {array} [paymentRequest.details.modifiers] Contains modifiers for
 * particular payment method identifiers
 * @member {string} [paymentRequest.details.error] Error description
 * @member {object} [paymentRequest.options] Provides information about the
 * options desired for the payment request
 * @member {boolean} [paymentRequest.options.requestPayerName] Indicates
 * whether the user agent should collect and return the payer's name as part of
 * the payment request
 * @member {boolean} [paymentRequest.options.requestPayerEmail] Indicates
 * whether the user agent should collect and return the payer's email address
 * as part of the payment request
 * @member {boolean} [paymentRequest.options.requestPayerPhone] Indicates
 * whether the user agent should collect and return the payer's phone number as
 * part of the payment request
 * @member {boolean} [paymentRequest.options.requestShipping] Indicates whether
 * the user agent should collect and return a shipping address as part of the
 * payment request
 * @member {string} [paymentRequest.options.shippingType] If requestShipping is
 * set to true, then the shippingType field may be used to influence the way
 * the user agent presents the user interface for gathering the shipping
 * address
 * @member {string} [paymentRequest.expires] Expiration for this request, in
 * ISO 8601 duration format (e.g., 'P1D')
 * @member {object} [paymentResponse] Corresponding payment response
 * @member {string} [paymentResponse.methodName] The payment method identifier
 * for the payment method that the user selected to fulfil the transaction
 * @member {object} [paymentResponse.details] A JSON-serializable object that
 * provides a payment method specific message used by the merchant to process
 * the transaction and determine successful fund transfer
 * @member {object} [paymentResponse.shippingAddress] If the requestShipping
 * flag was set to true in the PaymentOptions passed to the PaymentRequest
 * constructor, then shippingAddress will be the full and final shipping
 * address chosen by the user
 * @member {string} [paymentResponse.shippingAddress.country] This is the CLDR
 * (Common Locale Data Repository) region code. For example, US, GB, CN, or JP
 * @member {array} [paymentResponse.shippingAddress.addressLine] This is the
 * most specific part of the address. It can include, for example, a street
 * name, a house number, apartment number, a rural delivery route, descriptive
 * instructions, or a post office box number.
 * @member {string} [paymentResponse.shippingAddress.region] This is the top
 * level administrative subdivision of the country. For example, this can be a
 * state, a province, an oblast, or a prefecture.
 * @member {string} [paymentResponse.shippingAddress.city] This is the
 * city/town portion of the address.
 * @member {string} [paymentResponse.shippingAddress.dependentLocality] This is
 * the dependent locality or sublocality within a city. For example, used for
 * neighborhoods, boroughs, districts, or UK dependent localities.
 * @member {string} [paymentResponse.shippingAddress.postalCode] This is the
 * postal code or ZIP code, also known as PIN code in India.
 * @member {string} [paymentResponse.shippingAddress.sortingCode] This is the
 * sorting code as used in, for example, France.
 * @member {string} [paymentResponse.shippingAddress.languageCode] This is the
 * BCP-47 language code for the address. It's used to determine the field
 * separators and the order of fields when formatting the address for display.
 * @member {string} [paymentResponse.shippingAddress.organization] This is the
 * organization, firm, company, or institution at this address.
 * @member {string} [paymentResponse.shippingAddress.recipient] This is the
 * name of the recipient or contact person.
 * @member {string} [paymentResponse.shippingAddress.phone] This is the phone
 * number of the recipient or contact person.
 * @member {string} [paymentResponse.shippingOption] If the requestShipping
 * flag was set to true in the PaymentOptions passed to the PaymentRequest
 * constructor, then shippingOption will be the id attribute of the selected
 * shipping option
 * @member {string} [paymentResponse.payerEmail] If the requestPayerEmail flag
 * was set to true in the PaymentOptions passed to the PaymentRequest
 * constructor, then payerEmail will be the email address chosen by the user
 * @member {string} [paymentResponse.payerPhone] If the requestPayerPhone flag
 * was set to true in the PaymentOptions passed to the PaymentRequest
 * constructor, then payerPhone will be the phone number chosen by the user
 */
export interface PaymentRequestComplete {
  id?: string;
  paymentRequest?: PaymentRequest;
  paymentResponse?: PaymentResponse;
}

/**
 * @class
 * Initializes a new instance of the PaymentRequestCompleteResult class.
 * @constructor
 * Result from a completed payment request
 *
 * @member {string} [result] Result of the payment request completion
 */
export interface PaymentRequestCompleteResult {
  result?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentRequestUpdate class.
 * @constructor
 * An update to a payment request
 *
 * @member {string} [id] ID for the payment request to update
 * @member {object} [details] Update payment details
 * @member {object} [details.total] Contains the total amount of the payment
 * request
 * @member {string} [details.total.label] Human-readable description of the
 * item
 * @member {object} [details.total.amount] Monetary amount for the item
 * @member {string} [details.total.amount.currency] A currency identifier
 * @member {string} [details.total.amount.value] Decimal monetary value
 * @member {string} [details.total.amount.currencySystem] Currency system
 * @member {boolean} [details.total.pending] When set to true this flag means
 * that the amount field is not final.
 * @member {array} [details.displayItems] Contains line items for the payment
 * request that the user agent may display
 * @member {array} [details.shippingOptions] A sequence containing the
 * different shipping options for the user to choose from
 * @member {array} [details.modifiers] Contains modifiers for particular
 * payment method identifiers
 * @member {string} [details.error] Error description
 * @member {object} [shippingAddress] Updated shipping address
 * @member {string} [shippingAddress.country] This is the CLDR (Common Locale
 * Data Repository) region code. For example, US, GB, CN, or JP
 * @member {array} [shippingAddress.addressLine] This is the most specific part
 * of the address. It can include, for example, a street name, a house number,
 * apartment number, a rural delivery route, descriptive instructions, or a
 * post office box number.
 * @member {string} [shippingAddress.region] This is the top level
 * administrative subdivision of the country. For example, this can be a state,
 * a province, an oblast, or a prefecture.
 * @member {string} [shippingAddress.city] This is the city/town portion of the
 * address.
 * @member {string} [shippingAddress.dependentLocality] This is the dependent
 * locality or sublocality within a city. For example, used for neighborhoods,
 * boroughs, districts, or UK dependent localities.
 * @member {string} [shippingAddress.postalCode] This is the postal code or ZIP
 * code, also known as PIN code in India.
 * @member {string} [shippingAddress.sortingCode] This is the sorting code as
 * used in, for example, France.
 * @member {string} [shippingAddress.languageCode] This is the BCP-47 language
 * code for the address. It's used to determine the field separators and the
 * order of fields when formatting the address for display.
 * @member {string} [shippingAddress.organization] This is the organization,
 * firm, company, or institution at this address.
 * @member {string} [shippingAddress.recipient] This is the name of the
 * recipient or contact person.
 * @member {string} [shippingAddress.phone] This is the phone number of the
 * recipient or contact person.
 * @member {string} [shippingOption] Updated shipping options
 */
export interface PaymentRequestUpdate {
  id?: string;
  details?: PaymentDetails;
  shippingAddress?: PaymentAddress;
  shippingOption?: string;
}

/**
 * @class
 * Initializes a new instance of the PaymentRequestUpdateResult class.
 * @constructor
 * A result object from a Payment Request Update invoke operation
 *
 * @member {object} [details] Update payment details
 * @member {object} [details.total] Contains the total amount of the payment
 * request
 * @member {string} [details.total.label] Human-readable description of the
 * item
 * @member {object} [details.total.amount] Monetary amount for the item
 * @member {string} [details.total.amount.currency] A currency identifier
 * @member {string} [details.total.amount.value] Decimal monetary value
 * @member {string} [details.total.amount.currencySystem] Currency system
 * @member {boolean} [details.total.pending] When set to true this flag means
 * that the amount field is not final.
 * @member {array} [details.displayItems] Contains line items for the payment
 * request that the user agent may display
 * @member {array} [details.shippingOptions] A sequence containing the
 * different shipping options for the user to choose from
 * @member {array} [details.modifiers] Contains modifiers for particular
 * payment method identifiers
 * @member {string} [details.error] Error description
 */
export interface PaymentRequestUpdateResult {
  details?: PaymentDetails;
}
