/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Address within a Payment Request
 *
 */
class PaymentAddress {
  /**
   * Create a PaymentAddress.
   * @member {string} [country] This is the CLDR (Common Locale Data
   * Repository) region code. For example, US, GB, CN, or JP
   * @member {array} [addressLine] This is the most specific part of the
   * address. It can include, for example, a street name, a house number,
   * apartment number, a rural delivery route, descriptive instructions, or a
   * post office box number.
   * @member {string} [region] This is the top level administrative subdivision
   * of the country. For example, this can be a state, a province, an oblast,
   * or a prefecture.
   * @member {string} [city] This is the city/town portion of the address.
   * @member {string} [dependentLocality] This is the dependent locality or
   * sublocality within a city. For example, used for neighborhoods, boroughs,
   * districts, or UK dependent localities.
   * @member {string} [postalCode] This is the postal code or ZIP code, also
   * known as PIN code in India.
   * @member {string} [sortingCode] This is the sorting code as used in, for
   * example, France.
   * @member {string} [languageCode] This is the BCP-47 language code for the
   * address. It's used to determine the field separators and the order of
   * fields when formatting the address for display.
   * @member {string} [organization] This is the organization, firm, company,
   * or institution at this address.
   * @member {string} [recipient] This is the name of the recipient or contact
   * person.
   * @member {string} [phone] This is the phone number of the recipient or
   * contact person.
   */
  constructor() {
  }

  /**
   * Defines the metadata of PaymentAddress
   *
   * @returns {object} metadata of PaymentAddress
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PaymentAddress',
      type: {
        name: 'Composite',
        className: 'PaymentAddress',
        modelProperties: {
          country: {
            required: false,
            serializedName: 'country',
            type: {
              name: 'String'
            }
          },
          addressLine: {
            required: false,
            serializedName: 'addressLine',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          region: {
            required: false,
            serializedName: 'region',
            type: {
              name: 'String'
            }
          },
          city: {
            required: false,
            serializedName: 'city',
            type: {
              name: 'String'
            }
          },
          dependentLocality: {
            required: false,
            serializedName: 'dependentLocality',
            type: {
              name: 'String'
            }
          },
          postalCode: {
            required: false,
            serializedName: 'postalCode',
            type: {
              name: 'String'
            }
          },
          sortingCode: {
            required: false,
            serializedName: 'sortingCode',
            type: {
              name: 'String'
            }
          },
          languageCode: {
            required: false,
            serializedName: 'languageCode',
            type: {
              name: 'String'
            }
          },
          organization: {
            required: false,
            serializedName: 'organization',
            type: {
              name: 'String'
            }
          },
          recipient: {
            required: false,
            serializedName: 'recipient',
            type: {
              name: 'String'
            }
          },
          phone: {
            required: false,
            serializedName: 'phone',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PaymentAddress;
